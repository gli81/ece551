Grading at 10/29/2024:01:13:48.699644
For commit ID 783911417560d6d9f990c5be665d6482a3a42cf0
Grading at Mon Oct 28 09:13:21 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 ./story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.2: Current test is story-step1 ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.3: Current test is story-step1 ./test-step1/separate-line.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.4: Current test is story-step1 ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.5: Current test is story-step1 ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.6: Current test is story-step1 ./test-step1/newline.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 ./words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 ./test-step2/double-colon.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 ./test-step2/no-colon.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.4: Current test is story-step2 ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.5: Current test is story-step2 ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 ./words.txt ./story.txt 
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 ./words.txt ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 ./test-step1/nonexist.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.4: Current test is story-step3 ./test-step1/empty.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.5: Current test is story-step3 ./test-step1/newline.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.6: Current test is story-step3 ./words.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.7: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.8: Current test is story-step3 ./test-step1/empty.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.9: Current test is story-step3 ./test-step1/newline.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.10: Current test is story-step3 ./words.txt ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.11: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/empty.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.12: Current test is story-step3 ./test-step1/empty.txt ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.13: Current test is story-step3 ./test-step1/newline.txt ./test-step1/empty.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.14: Current test is story-step3 ./words.txt ./test-step1/newline.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.15: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.16: Current test is story-step3 ./test-step1/empty.txt ./test-step1/newline.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.17: Current test is story-step3 ./test-step1/newline.txt ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.18: Current test is story-step3 ./words.txt ./test-step3-story/large-backref.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.19: Current test is story-step3 ./words.txt ./test-step3-story/large-backref2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.20: Current test is story-step3 ./words.txt ./test-step3-story/ref-after-backref.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.21: Current test is story-step3 ./words.txt ./test-step3-story/float-backref.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.22: Current test is story-step3 ./words.txt ./test-step3-story/zero-backref.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.23: Current test is story-step3 ./words.txt ./test-step3-story/negative-backref.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.24: Current test is story-step3 ./test-step3-words/float-words.txt ./test-step3-story/float-backref.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.25: Current test is story-step3 ./test-step3-words/negative-words.txt ./test-step3-story/negative-backref.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.26: Current test is story-step3 ./test-step3-words/zero-words.txt ./test-step3-story/zero-backref.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 ./words.txt ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.2: Current test is story-step4 ./words.txt -n ./story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.3: Current test is story-step4 ./words.txt ./story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.4: Current test is story-step4 -n ./words.txt ./story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1347543== Memcheck, a memory error detector
==1347543== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1347543== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1347543== Command: ./story-step4 -n ./words.txt ./story.txt
==1347543== Parent PID: 1347542
==1347543== 
==1347543== Invalid read of size 8
==1347543==    at 0x10A290: removeUsedWord (rand_story.c:312)
==1347543==    by 0x10A729: replaceWords (rand_story.c:488)
==1347543==    by 0x10955A: main (story-step4.c:134)
==1347543==  Address 0x4a92180 is 0 bytes after a block of size 16 alloc'd
==1347543==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1347543==    by 0x109DF6: addValue (rand_story.c:189)
==1347543==    by 0x10A00A: buildCategory (rand_story.c:246)
==1347543==    by 0x1094A0: main (story-step4.c:112)
==1347543== 
==1347543== 
==1347543== HEAP SUMMARY:
==1347543==     in use at exit: 0 bytes in 0 blocks
==1347543==   total heap usage: 60 allocs, 60 frees, 15,653 bytes allocated
==1347543== 
==1347543== All heap blocks were freed -- no leaks are possible
==1347543== 
==1347543== For lists of detected and suppressed errors, rerun with: -s
==1347543== ERROR SUMMARY: 3 errors from 1 contexts (suppressed: 0 from 0)

4.5: Current test is story-step4 ./words.txt ./test-step4-story/remove-too-many.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.6: Current test is story-step4 -n ./words.txt ./test-step4-story/remove-too-many.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==1347620== Memcheck, a memory error detector
==1347620== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1347620== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1347620== Command: ./story-step4 -n ./words.txt ./test-step4-story/remove-too-many.txt
==1347620== Parent PID: 1347619
==1347620== 
==1347620== Invalid read of size 8
==1347620==    at 0x10A290: removeUsedWord (rand_story.c:312)
==1347620==    by 0x10A729: replaceWords (rand_story.c:488)
==1347620==    by 0x10955A: main (story-step4.c:134)
==1347620==  Address 0x4a922a0 is 0 bytes after a block of size 16 alloc'd
==1347620==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1347620==    by 0x109DF6: addValue (rand_story.c:189)
==1347620==    by 0x10A00A: buildCategory (rand_story.c:246)
==1347620==    by 0x1094A0: main (story-step4.c:112)
==1347620== 
==1347620== 
==1347620== HEAP SUMMARY:
==1347620==     in use at exit: 1,729 bytes in 33 blocks
==1347620==   total heap usage: 75 allocs, 42 frees, 12,187 bytes allocated
==1347620== 
==1347620== For a detailed leak analysis, rerun with: --leak-check=full
==1347620== 
==1347620== For lists of detected and suppressed errors, rerun with: -s
==1347620== ERROR SUMMARY: 3 errors from 1 contexts (suppressed: 0 from 0)

4.7: Current test is story-step4 -n ./words.txt ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1347659== Memcheck, a memory error detector
==1347659== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1347659== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1347659== Command: ./story-step4 -n ./words.txt ./story2.txt
==1347659== Parent PID: 1347658
==1347659== 
==1347659== Invalid read of size 8
==1347659==    at 0x10A290: removeUsedWord (rand_story.c:312)
==1347659==    by 0x10A729: replaceWords (rand_story.c:488)
==1347659==    by 0x10955A: main (story-step4.c:134)
==1347659==  Address 0x4a92180 is 0 bytes after a block of size 16 alloc'd
==1347659==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1347659==    by 0x109DF6: addValue (rand_story.c:189)
==1347659==    by 0x10A00A: buildCategory (rand_story.c:246)
==1347659==    by 0x1094A0: main (story-step4.c:112)
==1347659== 
==1347659== 
==1347659== HEAP SUMMARY:
==1347659==     in use at exit: 0 bytes in 0 blocks
==1347659==   total heap usage: 73 allocs, 73 frees, 16,122 bytes allocated
==1347659== 
==1347659== All heap blocks were freed -- no leaks are possible
==1347659== 
==1347659== For lists of detected and suppressed errors, rerun with: -s
==1347659== ERROR SUMMARY: 3 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
