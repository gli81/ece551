Grading at 10/27/2024:02:54:21.744023
For commit ID 598d873881db3b9735a18bbebf24a84ef37a8421
Grading at Sat Oct 26 10:54:04 PM EDT 2024
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 ./story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.2: Current test is story-step1 ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.3: Current test is story-step1 ./test-step1/separate-line.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.4: Current test is story-step1 ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.5: Current test is story-step1 ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.6: Current test is story-step1 ./test-step1/newline.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 ./words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 ./test-step2/double-colon.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 ./test-step2/no-colon.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.4: Current test is story-step2 ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.5: Current test is story-step2 ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 ./words.txt ./story.txt 
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 ./words.txt ./story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 ./test-step1/nonexist.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.4: Current test is story-step3 ./test-step1/empty.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.5: Current test is story-step3 ./test-step1/newline.txt ./story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.6: Current test is story-step3 ./words.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.7: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.8: Current test is story-step3 ./test-step1/empty.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.9: Current test is story-step3 ./test-step1/newline.txt ./test-step1/nonexist.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.10: Current test is story-step3 ./words.txt ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==170986== Memcheck, a memory error detector
==170986== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==170986== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==170986== Command: ./story-step3 ./words.txt ./test-step1/empty.txt
==170986== Parent PID: 170985
==170986== 
==170986== 
==170986== HEAP SUMMARY:
==170986==     in use at exit: 1,279 bytes in 21 blocks
==170986==   total heap usage: 37 allocs, 16 frees, 10,919 bytes allocated
==170986== 
==170986== 503 (16 direct, 487 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 8
==170986==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==170986==    by 0x109E73: buildCategory (rand_story.c:223)
==170986==    by 0x10944E: main (story-step3.c:11)
==170986== 
==170986== 776 (56 direct, 720 indirect) bytes in 1 blocks are definitely lost in loss record 8 of 8
==170986==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==170986==    by 0x1096C3: readAFile (rand_story.c:31)
==170986==    by 0x10943E: main (story-step3.c:10)
==170986== 
==170986== LEAK SUMMARY:
==170986==    definitely lost: 72 bytes in 2 blocks
==170986==    indirectly lost: 1,207 bytes in 19 blocks
==170986==      possibly lost: 0 bytes in 0 blocks
==170986==    still reachable: 0 bytes in 0 blocks
==170986==         suppressed: 0 bytes in 0 blocks
==170986== 
==170986== For lists of detected and suppressed errors, rerun with: -s
==170986== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

3.11: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/empty.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.12: Current test is story-step3 ./test-step1/empty.txt ./test-step1/empty.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.13: Current test is story-step3 ./test-step1/newline.txt ./test-step1/empty.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.14: Current test is story-step3 ./words.txt ./test-step1/newline.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.15: Current test is story-step3 ./test-step1/nonexist.txt ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.16: Current test is story-step3 ./test-step1/empty.txt ./test-step1/newline.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

3.17: Current test is story-step3 ./test-step1/newline.txt ./test-step1/newline.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
The code did not compile!

Overall Grade: NO GRADE YET
