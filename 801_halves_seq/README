For this assignment, you are going to consider sequences
of 1/2 and 3/2 (one half and three halves) of a particular
length.  In particular you are interested in sequences
where the product of the terms is greater than or equal to
1 for all terms until the last, at which point it must be
less than 1.

For example

3/2 * 3/2 * 1/2 * 1/2

has this property.
  - The product of just the first term is 1.5 (>= 1)
  - The product of the first two terms is 2.25 (>= 1)
  - The product of the first three terms is 1.125 (>= 1)
  - The product of all the terms is 0.5625 (< 1)

Note that if we looked at

3/2 * 1/2 * 3/2 * 1/2

it would not have the properties we are looking for as
the product of the first two terms (0.75) is less than 1---and
we only want that to happen when we get to the last term.


Your job is to write the function

  unsigned hseq(unsigned n)

which takes one parameter (n), that represents the length
of a sequence (in our example above, n=4) and returns
the number of sequences of this length that meet the property
described above (product >=1 until the end, then product < 1).

Note that for some values of n, the answer is 0.  For example,
when n=3, there are no such sequences, if we examine all 8
possibilities, we will see all of them fail to meet
the property we want:

1/2 * 1/2 * 1/2  : fails on first term (<1)
1/2 * 1/2 * 3/2  : fails on first term (<1)
1/2 * 3/2 * 1/2  : fails on first term (<1)
1/2 * 3/2 * 3/2  : fails on first term (<1)
3/2 * 1/2 * 1/2  : fails on second term (<1)
3/2 * 1/2 * 3/2  : fails on second term (<1)
3/2 * 3/2 * 1/2  : fails on third term (>1)
3/2 * 3/2 * 3/2  : fails on third term (>1)

For other values of n, we might find several sequences.
For example for 5, there are 2 (so hseq(5) should return 2):

3/2 * 3/2 * 3/2 * 1/2 * 1/2
3/2 * 3/2 * 1/2 * 3/2 * 1/2

We have provided a main and a Makefile for you.
If you do "make" it will build your code into a
program called hseq.  This program takes two command
line arguments, the start and end of the range to print.
So if you run

./hseq 4 6

It should print:
4: 1
5: 2
6: 0

Note that in particaular we have provide the output for

./hseq 1 12
in output_1_12.txt

and
./hseq 20 30
in output_20_30.txt


As one final added challenge---can you do anything to speed
up your program for large values of N?   We threw in one
small optimization that sped up

./hseq 39 41

by a factor of 3 (so it took 1/3 as much time).

Note that if you are taking Theory and Practice
of Alogrithms, and learning about dynamic programming,
this problem is a great use of that technique---our
dynamic programming solution is about 10,000x faster on
hseq 39 41 than our simple recursive solution.

Note that we did our dynamic programming of this in
C++ so we could make use of std::vector, std::pair,
and std::map---you might wait until you have learned
about those to try this.

